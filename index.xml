<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wahab Ahmad</title>
    <link>https://w28ahmad.github.io/</link>
    <description>Recent content on Wahab Ahmad</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Oct 2023 21:48:01 -0400</lastBuildDate><atom:link href="https://w28ahmad.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding Timestamps and Timezones</title>
      <link>https://w28ahmad.github.io/post/understanding-timestamps/</link>
      <pubDate>Fri, 20 Oct 2023 21:48:01 -0400</pubDate>
      
      <guid>https://w28ahmad.github.io/post/understanding-timestamps/</guid>
      <description>Dates Dates are generally formed of 3 triplets, namely, {Day, Month, Year}. This already can create a lot of confusion around the world as they are ordered differently. For example, the date {16, 02, 2014} can be written as:
Additionally, there are many ways to seperate these triplets. Some use / whereas others use - and .. All this variation was sandardized using the ISO-8601.
Timestamps This standard allows us the view the same time regardless of where we live.</description>
    </item>
    
    <item>
      <title>Java Streams</title>
      <link>https://w28ahmad.github.io/post/java-streams/</link>
      <pubDate>Fri, 13 Oct 2023 10:35:49 -0400</pubDate>
      
      <guid>https://w28ahmad.github.io/post/java-streams/</guid>
      <description>What is a Stream Streams are contained inside the standard java.util library that were introduced in Java 8. They are used when we have sequence of elements on which we can perform aggregate operations. Stream operations consist of a stream pipeline, which consists of a source, a set of operations/computations followed by a terminal operation. Streams are lazy which means that they are not setup or initialized during setup, rather computation on the source is only initiated when the program reaches the terminal operation.</description>
    </item>
    
    <item>
      <title>Reviewing SQL</title>
      <link>https://w28ahmad.github.io/post/sql-review/</link>
      <pubDate>Sat, 02 Sep 2023 23:31:19 -0400</pubDate>
      
      <guid>https://w28ahmad.github.io/post/sql-review/</guid>
      <description>A Brief Review of SQL Queries SELECT &amp;lt;columns&amp;gt; FROM &amp;lt;table&amp;gt; WHERE &amp;lt;predicate&amp;gt; GROUP BY &amp;lt;columns&amp;gt; HAVING &amp;lt;predicate&amp;gt; ORDER BY &amp;lt;columns&amp;gt; LIMIT &amp;lt;num&amp;gt;; We have the following $7$ basic operations when querying data from a single table. We need to SELECT certain columns FROM a table, keep rows WHERE a certain condition matches. Potentially, GROUP columns that HAVE another condition matching (within the groups) and aggregate those results using aggregation functions. We can also ORDER BY one or more columns.</description>
    </item>
    
    <item>
      <title>Consistent Hashing</title>
      <link>https://w28ahmad.github.io/post/consistent_hashing/</link>
      <pubDate>Fri, 07 Jul 2023 08:19:07 -0400</pubDate>
      
      <guid>https://w28ahmad.github.io/post/consistent_hashing/</guid>
      <description>If you are unsure of the implementation, you can find the source code of my consistent hashing algorithm here.
What is Consistent Hashing? Imagine we are running a large web service that serves millions of requests every hour. Now this web service serves the client by making HTTP requests to a backend, which in turn uses a database(s) to query data and return it to the client. Now, when you are using a web service, you will often return to the same page as you browse the web service, which means you will be making redundant calls to the database.</description>
    </item>
    
    <item>
      <title>Mastering Binary Trees</title>
      <link>https://w28ahmad.github.io/post/mastering_binary_trees/</link>
      <pubDate>Wed, 10 May 2023 18:01:22 -0400</pubDate>
      
      <guid>https://w28ahmad.github.io/post/mastering_binary_trees/</guid>
      <description>Overview Binary trees are a data structure in computer science that consist of nodes with each node having at most $2$ children, referred to as left/right child. They are often used to organize data hierarchically, allowing efficient insertion, deletion and search operations. Common types of binary trees include binary search trees, where nodes are ordered such that for each node, all elements in its left subtree are less than the node&amp;rsquo;s value, and all nodes in its right subtree are greater than or equal to the node&amp;rsquo;s value.</description>
    </item>
    
    <item>
      <title>Mastering Dynamic Programming</title>
      <link>https://w28ahmad.github.io/post/mastering_dynamic_programming/</link>
      <pubDate>Wed, 26 Apr 2023 02:01:05 -0400</pubDate>
      
      <guid>https://w28ahmad.github.io/post/mastering_dynamic_programming/</guid>
      <description>Overview Dynamic Programming is a general technique for solving optimization, search, and counting problems that can be decomposed to subproblems. In such problems, these subproblems commonly reoccur and so we must cache the solutions to the subproblems and use them to solve larger problems until we obtain the solution to the original problem.
Introduction Fibonacci Numbers Let us start with a rather simple example, Fibonacci Numbers are computed using the following formula $F(n) = F(n-1) + F(n-2)$ and constructs the following infinite sequence $0, 1, 1, 2, 3, 5, 8, 13, 21, &amp;hellip;$ Since the new element in the sequence is generated using the previous 2 elements suggests that Dynamic Programming can be leveraged.</description>
    </item>
    
    <item>
      <title>Architectural Styles</title>
      <link>https://w28ahmad.github.io/post/architectural_style/</link>
      <pubDate>Mon, 24 Apr 2023 04:36:36 -0400</pubDate>
      
      <guid>https://w28ahmad.github.io/post/architectural_style/</guid>
      <description>Pipe and Filter Suitable for applications that require a defined series of independent computations. Components read streams of data on their inputs and produce streams of data on their outputs. Components: Filters, apply local transformations to their input streams and often do their computing incrementally so that the output begins before all input is consumed. Connectors: Pipes, serve as conduits for the streams, transmitting outputs of one filter to inputs of another.</description>
    </item>
    
    <item>
      <title>Design Patterns</title>
      <link>https://w28ahmad.github.io/post/design-patterns/</link>
      <pubDate>Wed, 19 Apr 2023 07:15:38 -0400</pubDate>
      
      <guid>https://w28ahmad.github.io/post/design-patterns/</guid>
      <description>Overview Object-oriented design patterns are fundamental to programming. They are reusable solutions to common problems encountered during programming, often making heavy use of interfaces, information hiding, polymorphism, and intermediary objects. There are three main categories of design patterns that will be discussed in this blog:
Creational Patterns Structural Patterns Behavioral Patterns Other engineers have faced issues while developing applications, and they have come up with specific design patterns. We can leverage their knowledge in our own software design to simplify the process.</description>
    </item>
    
    <item>
      <title>Supply and Demand</title>
      <link>https://w28ahmad.github.io/post/supply-and-demand/</link>
      <pubDate>Mon, 18 Oct 2021 17:29:44 -0400</pubDate>
      
      <guid>https://w28ahmad.github.io/post/supply-and-demand/</guid>
      <description>Overview What is Economy? Economy: Economy is a science that studies the set of actions and choices individuals, businesses, communities and government take as a result some set of incentives and scarcities.
Demand and Supply Demand For a product or service to have demand there must be 3 criterion that must be met:
A) You must want it.
B) You must be able to afford this product or service
C) You must have a plan to purchase this product or service</description>
    </item>
    
    <item>
      <title>Math Behind a Neural Network</title>
      <link>https://w28ahmad.github.io/post/math-behind-a-neural-network/</link>
      <pubDate>Sun, 05 Sep 2021 19:09:57 -0400</pubDate>
      
      <guid>https://w28ahmad.github.io/post/math-behind-a-neural-network/</guid>
      <description>Overview Machine Learning and AI is all the talk these days in engineering communities. AI in recent years achieved a great mile stone, it can now defeat any individual in any board game ever conceived by humans. Fully autonomous cars are coming closer reality with every passing year. So now is a good time as any to start to learn what is machine learning all about. The post will go through some of the core properties of neural networks such as Forward Propagation and Backward Propagation with some mathematical rigour.</description>
    </item>
    
  </channel>
</rss>
